"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  reduceConfigs: () => reduceConfigs,
  reduceConfigsAsyncWithContext: () => reduceConfigsAsyncWithContext,
  reduceConfigsMergeContext: () => reduceConfigsMergeContext,
  reduceConfigsWithContext: () => reduceConfigsWithContext
});
module.exports = __toCommonJS(src_exports);
var isNil = (o) => o === void 0 || o === null;
var isFunction = (func) => typeof func === "function";
var isObject = (obj) => obj !== null && typeof obj === "object";
var isPlainObject = (obj) => isObject(obj) && Object.prototype.toString.call(obj) === "[object Object]";
function reduceConfigs({
  initial,
  config,
  mergeFn = Object.assign
}) {
  if (isNil(config)) {
    return initial;
  }
  if (isPlainObject(config)) {
    return isPlainObject(initial) ? mergeFn(initial, config) : config;
  }
  if (isFunction(config)) {
    return config(initial) ?? initial;
  }
  if (Array.isArray(config)) {
    return config.reduce(
      (initial2, config2) => reduceConfigs({ initial: initial2, config: config2, mergeFn }),
      initial
    );
  }
  return config ?? initial;
}
function reduceConfigsWithContext({
  initial,
  config,
  ctx,
  mergeFn = Object.assign
}) {
  if (isNil(config)) {
    return initial;
  }
  if (isPlainObject(config)) {
    return isPlainObject(initial) ? mergeFn(initial, config) : config;
  }
  if (isFunction(config)) {
    return config(initial, ctx) ?? initial;
  }
  if (Array.isArray(config)) {
    return config.reduce(
      (initial2, config2) => reduceConfigsWithContext({ initial: initial2, config: config2, ctx, mergeFn }),
      initial
    );
  }
  return config ?? initial;
}
async function reduceConfigsAsyncWithContext({
  initial,
  config,
  ctx,
  mergeFn = Object.assign
}) {
  if (isNil(config)) {
    return initial;
  }
  if (isPlainObject(config)) {
    return isPlainObject(initial) ? mergeFn(initial, config) : config;
  }
  if (isFunction(config)) {
    return await config(initial, ctx) ?? initial;
  }
  if (Array.isArray(config)) {
    return config.reduce(
      (initial2, config2) => reduceConfigsWithContext({ initial: initial2, config: config2, ctx, mergeFn }),
      initial
    );
  }
  return config ?? initial;
}
function reduceConfigsMergeContext({
  initial,
  config,
  ctx,
  mergeFn = Object.assign
}) {
  if (isNil(config)) {
    return initial;
  }
  if (isPlainObject(config)) {
    return isPlainObject(initial) ? mergeFn(initial, config) : config;
  }
  if (isFunction(config)) {
    return config({ value: initial, ...ctx }) ?? initial;
  }
  if (Array.isArray(config)) {
    return config.reduce(
      (initial2, config2) => reduceConfigsMergeContext({
        initial: initial2,
        config: config2,
        ctx,
        mergeFn
      }),
      initial
    );
  }
  return config ?? initial;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  reduceConfigs,
  reduceConfigsAsyncWithContext,
  reduceConfigsMergeContext,
  reduceConfigsWithContext
});
