import { BuiltinPluginName, type JsChunk } from "@rspack/binding";
import { z } from "../../compiled/zod";
declare const rule: z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>;
export type Rule = z.infer<typeof rule>;
declare const rules: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>;
export type Rules = z.infer<typeof rules>;
declare const bannerFunction: z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    hash: z.ZodString;
    chunk: z.ZodType<JsChunk, z.ZodTypeDef, JsChunk>;
    filename: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filename: string;
    hash: string;
    chunk: JsChunk;
}, {
    filename: string;
    hash: string;
    chunk: JsChunk;
}>], z.ZodUnknown>, z.ZodString>;
export type BannerFunction = z.infer<typeof bannerFunction>;
declare const bannerContent: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    hash: z.ZodString;
    chunk: z.ZodType<JsChunk, z.ZodTypeDef, JsChunk>;
    filename: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filename: string;
    hash: string;
    chunk: JsChunk;
}, {
    filename: string;
    hash: string;
    chunk: JsChunk;
}>], z.ZodUnknown>, z.ZodString>]>;
export type BannerContent = z.infer<typeof bannerContent>;
declare const bannerPluginOptions: z.ZodObject<{
    banner: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        hash: z.ZodString;
        chunk: z.ZodType<JsChunk, z.ZodTypeDef, JsChunk>;
        filename: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }>], z.ZodUnknown>, z.ZodString>]>;
    entryOnly: z.ZodOptional<z.ZodBoolean>;
    exclude: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>>;
    include: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>>;
    raw: z.ZodOptional<z.ZodBoolean>;
    footer: z.ZodOptional<z.ZodBoolean>;
    stage: z.ZodOptional<z.ZodNumber>;
    test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>>;
}, "strict", z.ZodTypeAny, {
    banner: string | ((args_0: {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, ...args_1: unknown[]) => string);
    entryOnly?: boolean | undefined;
    exclude?: string | RegExp | (string | RegExp)[] | undefined;
    include?: string | RegExp | (string | RegExp)[] | undefined;
    raw?: boolean | undefined;
    footer?: boolean | undefined;
    stage?: number | undefined;
    test?: string | RegExp | (string | RegExp)[] | undefined;
}, {
    banner: string | ((args_0: {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, ...args_1: unknown[]) => string);
    entryOnly?: boolean | undefined;
    exclude?: string | RegExp | (string | RegExp)[] | undefined;
    include?: string | RegExp | (string | RegExp)[] | undefined;
    raw?: boolean | undefined;
    footer?: boolean | undefined;
    stage?: number | undefined;
    test?: string | RegExp | (string | RegExp)[] | undefined;
}>;
export type BannerPluginOptions = z.infer<typeof bannerPluginOptions>;
declare const bannerPluginArgument: z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
    hash: z.ZodString;
    chunk: z.ZodType<JsChunk, z.ZodTypeDef, JsChunk>;
    filename: z.ZodString;
}, "strip", z.ZodTypeAny, {
    filename: string;
    hash: string;
    chunk: JsChunk;
}, {
    filename: string;
    hash: string;
    chunk: JsChunk;
}>], z.ZodUnknown>, z.ZodString>]>, z.ZodObject<{
    banner: z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodObject<{
        hash: z.ZodString;
        chunk: z.ZodType<JsChunk, z.ZodTypeDef, JsChunk>;
        filename: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }>], z.ZodUnknown>, z.ZodString>]>;
    entryOnly: z.ZodOptional<z.ZodBoolean>;
    exclude: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>>;
    include: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>>;
    raw: z.ZodOptional<z.ZodBoolean>;
    footer: z.ZodOptional<z.ZodBoolean>;
    stage: z.ZodOptional<z.ZodNumber>;
    test: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<RegExp, z.ZodTypeDef, RegExp>]>, "many">]>>;
}, "strict", z.ZodTypeAny, {
    banner: string | ((args_0: {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, ...args_1: unknown[]) => string);
    entryOnly?: boolean | undefined;
    exclude?: string | RegExp | (string | RegExp)[] | undefined;
    include?: string | RegExp | (string | RegExp)[] | undefined;
    raw?: boolean | undefined;
    footer?: boolean | undefined;
    stage?: number | undefined;
    test?: string | RegExp | (string | RegExp)[] | undefined;
}, {
    banner: string | ((args_0: {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, ...args_1: unknown[]) => string);
    entryOnly?: boolean | undefined;
    exclude?: string | RegExp | (string | RegExp)[] | undefined;
    include?: string | RegExp | (string | RegExp)[] | undefined;
    raw?: boolean | undefined;
    footer?: boolean | undefined;
    stage?: number | undefined;
    test?: string | RegExp | (string | RegExp)[] | undefined;
}>]>;
export type BannerPluginArgument = z.infer<typeof bannerPluginArgument>;
export declare const BannerPlugin: {
    new (args: string | ((args_0: {
        filename: string;
        hash: string;
        chunk: JsChunk;
    }, ...args_1: unknown[]) => string) | {
        banner: string | ((args_0: {
            filename: string;
            hash: string;
            chunk: JsChunk;
        }, ...args_1: unknown[]) => string);
        entryOnly?: boolean | undefined;
        exclude?: string | RegExp | (string | RegExp)[] | undefined;
        include?: string | RegExp | (string | RegExp)[] | undefined;
        raw?: boolean | undefined;
        footer?: boolean | undefined;
        stage?: number | undefined;
        test?: string | RegExp | (string | RegExp)[] | undefined;
    }): {
        name: BuiltinPluginName;
        _args: [args: string | ((args_0: {
            filename: string;
            hash: string;
            chunk: JsChunk;
        }, ...args_1: unknown[]) => string) | {
            banner: string | ((args_0: {
                filename: string;
                hash: string;
                chunk: JsChunk;
            }, ...args_1: unknown[]) => string);
            entryOnly?: boolean | undefined;
            exclude?: string | RegExp | (string | RegExp)[] | undefined;
            include?: string | RegExp | (string | RegExp)[] | undefined;
            raw?: boolean | undefined;
            footer?: boolean | undefined;
            stage?: number | undefined;
            test?: string | RegExp | (string | RegExp)[] | undefined;
        }];
        affectedHooks: "done" | "make" | "compile" | "emit" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "compilation" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishMake" | "entryOption" | undefined;
        raw(compiler: import("../Compiler").Compiler): import("@rspack/binding").BuiltinPlugin;
        apply(compiler: import("../Compiler").Compiler): void;
    };
};
export {};
