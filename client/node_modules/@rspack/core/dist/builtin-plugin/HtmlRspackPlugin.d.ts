import { BuiltinPluginName, type JsAfterEmitData, type JsAfterTemplateExecutionData, type JsAlterAssetTagGroupsData, type JsAlterAssetTagsData, type JsBeforeAssetTagGenerationData, type JsBeforeEmitData, type JsHtmlPluginTag } from "@rspack/binding";
import * as liteTapable from "@rspack/lite-tapable";
import { z } from "../../compiled/zod";
import { Compilation } from "../Compilation";
import type { Compiler } from "../Compiler";
declare const htmlRspackPluginOptions: z.ZodObject<{
    filename: z.ZodOptional<z.ZodString>;
    template: z.ZodOptional<z.ZodEffects<z.ZodString, string, string>>;
    templateContent: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodFunction<z.ZodTuple<[z.ZodRecord<z.ZodString, z.ZodAny>], z.ZodUnknown>, z.ZodUnion<[z.ZodString, z.ZodPromise<z.ZodString>]>>]>>;
    templateParameters: z.ZodOptional<z.ZodUnion<[z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodString>, z.ZodBoolean]>, z.ZodFunction<z.ZodTuple<[z.ZodRecord<z.ZodString, z.ZodAny>], z.ZodUnknown>, z.ZodUnion<[z.ZodRecord<z.ZodString, z.ZodAny>, z.ZodPromise<z.ZodRecord<z.ZodString, z.ZodAny>>]>>]>>;
    inject: z.ZodOptional<z.ZodUnion<[z.ZodEnum<["head", "body"]>, z.ZodBoolean]>>;
    publicPath: z.ZodOptional<z.ZodString>;
    base: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        href: z.ZodOptional<z.ZodString>;
        target: z.ZodOptional<z.ZodEnum<["_self", "_blank", "_parent", "_top"]>>;
    }, "strict", z.ZodTypeAny, {
        target?: "_self" | "_blank" | "_parent" | "_top" | undefined;
        href?: string | undefined;
    }, {
        target?: "_self" | "_blank" | "_parent" | "_top" | undefined;
        href?: string | undefined;
    }>]>>;
    scriptLoading: z.ZodOptional<z.ZodEnum<["blocking", "defer", "module", "systemjs-module"]>>;
    chunks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    excludeChunks: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    sri: z.ZodOptional<z.ZodEnum<["sha256", "sha384", "sha512"]>>;
    minify: z.ZodOptional<z.ZodBoolean>;
    title: z.ZodOptional<z.ZodString>;
    favicon: z.ZodOptional<z.ZodString>;
    meta: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodString>]>>>;
    hash: z.ZodOptional<z.ZodBoolean>;
}, "strict", z.ZodTypeAny, {
    filename?: string | undefined;
    publicPath?: string | undefined;
    hash?: boolean | undefined;
    chunks?: string[] | undefined;
    base?: string | {
        target?: "_self" | "_blank" | "_parent" | "_top" | undefined;
        href?: string | undefined;
    } | undefined;
    template?: string | undefined;
    templateContent?: string | ((args_0: Record<string, any>, ...args_1: unknown[]) => string | Promise<string>) | undefined;
    templateParameters?: boolean | Record<string, string> | ((args_0: Record<string, any>, ...args_1: unknown[]) => Record<string, any> | Promise<Record<string, any>>) | undefined;
    inject?: boolean | "head" | "body" | undefined;
    scriptLoading?: "module" | "blocking" | "defer" | "systemjs-module" | undefined;
    excludeChunks?: string[] | undefined;
    sri?: "sha256" | "sha384" | "sha512" | undefined;
    minify?: boolean | undefined;
    title?: string | undefined;
    favicon?: string | undefined;
    meta?: Record<string, string | Record<string, string>> | undefined;
}, {
    filename?: string | undefined;
    publicPath?: string | undefined;
    hash?: boolean | undefined;
    chunks?: string[] | undefined;
    base?: string | {
        target?: "_self" | "_blank" | "_parent" | "_top" | undefined;
        href?: string | undefined;
    } | undefined;
    template?: string | undefined;
    templateContent?: string | ((args_0: Record<string, any>, ...args_1: unknown[]) => string | Promise<string>) | undefined;
    templateParameters?: boolean | Record<string, string> | ((args_0: Record<string, any>, ...args_1: unknown[]) => Record<string, any> | Promise<Record<string, any>>) | undefined;
    inject?: boolean | "head" | "body" | undefined;
    scriptLoading?: "module" | "blocking" | "defer" | "systemjs-module" | undefined;
    excludeChunks?: string[] | undefined;
    sri?: "sha256" | "sha384" | "sha512" | undefined;
    minify?: boolean | undefined;
    title?: string | undefined;
    favicon?: string | undefined;
    meta?: Record<string, string | Record<string, string>> | undefined;
}>;
export type HtmlRspackPluginOptions = z.infer<typeof htmlRspackPluginOptions>;
type ExtraPluginHookData = {
    plugin: {
        options: HtmlRspackPluginOptions;
    };
};
export type HtmlRspackPluginHooks = {
    beforeAssetTagGeneration: liteTapable.AsyncSeriesWaterfallHook<[
        JsBeforeAssetTagGenerationData & ExtraPluginHookData
    ]>;
    alterAssetTags: liteTapable.AsyncSeriesWaterfallHook<[JsAlterAssetTagsData]>;
    alterAssetTagGroups: liteTapable.AsyncSeriesWaterfallHook<[
        JsAlterAssetTagGroupsData & ExtraPluginHookData
    ]>;
    afterTemplateExecution: liteTapable.AsyncSeriesWaterfallHook<[
        JsAfterTemplateExecutionData & ExtraPluginHookData
    ]>;
    beforeEmit: liteTapable.AsyncSeriesWaterfallHook<[
        JsBeforeEmitData & ExtraPluginHookData
    ]>;
    afterEmit: liteTapable.AsyncSeriesWaterfallHook<[
        JsAfterEmitData & ExtraPluginHookData
    ]>;
};
declare const HtmlRspackPlugin: {
    new (c?: {
        filename?: string | undefined;
        publicPath?: string | undefined;
        hash?: boolean | undefined;
        chunks?: string[] | undefined;
        base?: string | {
            target?: "_self" | "_blank" | "_parent" | "_top" | undefined;
            href?: string | undefined;
        } | undefined;
        template?: string | undefined;
        templateContent?: string | ((args_0: Record<string, any>, ...args_1: unknown[]) => string | Promise<string>) | undefined;
        templateParameters?: boolean | Record<string, string> | ((args_0: Record<string, any>, ...args_1: unknown[]) => Record<string, any> | Promise<Record<string, any>>) | undefined;
        inject?: boolean | "head" | "body" | undefined;
        scriptLoading?: "module" | "blocking" | "defer" | "systemjs-module" | undefined;
        excludeChunks?: string[] | undefined;
        sri?: "sha256" | "sha384" | "sha512" | undefined;
        minify?: boolean | undefined;
        title?: string | undefined;
        favicon?: string | undefined;
        meta?: Record<string, string | Record<string, string>> | undefined;
    } | undefined): {
        name: BuiltinPluginName;
        _args: [c?: {
            filename?: string | undefined;
            publicPath?: string | undefined;
            hash?: boolean | undefined;
            chunks?: string[] | undefined;
            base?: string | {
                target?: "_self" | "_blank" | "_parent" | "_top" | undefined;
                href?: string | undefined;
            } | undefined;
            template?: string | undefined;
            templateContent?: string | ((args_0: Record<string, any>, ...args_1: unknown[]) => string | Promise<string>) | undefined;
            templateParameters?: boolean | Record<string, string> | ((args_0: Record<string, any>, ...args_1: unknown[]) => Record<string, any> | Promise<Record<string, any>>) | undefined;
            inject?: boolean | "head" | "body" | undefined;
            scriptLoading?: "module" | "blocking" | "defer" | "systemjs-module" | undefined;
            excludeChunks?: string[] | undefined;
            sri?: "sha256" | "sha384" | "sha512" | undefined;
            minify?: boolean | undefined;
            title?: string | undefined;
            favicon?: string | undefined;
            meta?: Record<string, string | Record<string, string>> | undefined;
        } | undefined];
        affectedHooks: "done" | "make" | "compile" | "emit" | "afterEmit" | "invalid" | "thisCompilation" | "afterDone" | "compilation" | "normalModuleFactory" | "contextModuleFactory" | "initialize" | "shouldEmit" | "infrastructureLog" | "beforeRun" | "run" | "assetEmitted" | "failed" | "shutdown" | "watchRun" | "watchClose" | "environment" | "afterEnvironment" | "afterPlugins" | "afterResolvers" | "beforeCompile" | "afterCompile" | "finishMake" | "entryOption" | undefined;
        raw(compiler: Compiler): import("@rspack/binding").BuiltinPlugin;
        apply(compiler: Compiler): void;
    };
} & {
    getCompilationHooks: (compilation: Compilation) => HtmlRspackPluginHooks;
    getCompilationOptions: (compilation: Compilation) => HtmlRspackPluginOptions | void;
    createHtmlTagObject: (tagName: string, attributes?: Record<string, string | boolean>, innerHTML?: string | undefined) => JsHtmlPluginTag;
};
export { HtmlRspackPlugin };
