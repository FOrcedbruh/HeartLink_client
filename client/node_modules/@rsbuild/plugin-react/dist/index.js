import { createRequire } from 'module';
var require = createRequire(import.meta['url']);

var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw Error('Dynamic require of "' + x + '" is not supported');
});

// ../../node_modules/.pnpm/@modern-js+module-tools@2.59.0_typescript@5.5.2/node_modules/@modern-js/module-tools/shims/esm.js
import path from "path";
import { fileURLToPath } from "url";

// src/react.ts
import path2 from "path";
var applyBasicReactSupport = (api, options) => {
  const REACT_REFRESH_PATH = __require.resolve("react-refresh");
  api.modifyEnvironmentConfig((userConfig, { mergeEnvironmentConfig }) => {
    const isDev = userConfig.mode === "development";
    const reactOptions = {
      development: isDev,
      refresh: isDev && userConfig.dev.hmr && userConfig.output.target === "web",
      runtime: "automatic",
      ...options.swcReactOptions
    };
    const extraConfig = {
      tools: {
        swc: {
          jsc: {
            parser: {
              syntax: "typescript",
              // enable supports for JSX/TSX compilation
              tsx: true
            },
            transform: {
              react: reactOptions
            }
          }
        }
      }
    };
    return mergeEnvironmentConfig(extraConfig, userConfig);
  });
  api.modifyBundlerChain(
    async (chain, { CHAIN_ID, environment, isDev, target }) => {
      const { config } = environment;
      const usingHMR = isDev && config.dev.hmr && target === "web";
      if (!usingHMR) {
        return;
      }
      chain.resolve.alias.set(
        "react-refresh",
        path2.dirname(REACT_REFRESH_PATH)
      );
      const { default: ReactRefreshRspackPlugin } = await import("@rspack/plugin-react-refresh");
      const SCRIPT_REGEX = /\.(?:js|jsx|mjs|cjs|ts|tsx|mts|cts)$/;
      chain.plugin(CHAIN_ID.PLUGIN.REACT_FAST_REFRESH).use(ReactRefreshRspackPlugin, [
        {
          include: [SCRIPT_REGEX],
          ...options.reactRefreshOptions
        }
      ]);
    }
  );
};
var applyReactProfiler = (api) => {
  api.modifyEnvironmentConfig((config, { mergeEnvironmentConfig }) => {
    if (config.mode !== "production") {
      return;
    }
    const enableProfilerConfig = {
      output: {
        minify: {
          jsOptions: {
            minimizerOptions: {
              // Need to keep classnames and function names like Components for debugging purposes.
              mangle: {
                keep_classnames: true,
                keep_fnames: true
              }
            }
          }
        }
      }
    };
    return mergeEnvironmentConfig(config, enableProfilerConfig);
  });
  api.modifyBundlerChain((chain, { isProd }) => {
    if (!isProd) {
      return;
    }
    chain.resolve.alias.set("react-dom$", "react-dom/profiling");
    chain.resolve.alias.set("scheduler/tracing", "scheduler/tracing-profiling");
  });
};

// src/splitChunks.ts
var isPlainObject = (obj) => obj !== null && typeof obj === "object" && Object.prototype.toString.call(obj) === "[object Object]";
var applySplitChunksRule = (api, options = {
  react: true,
  router: true
}) => {
  api.modifyBundlerChain((chain, { environment, isProd }) => {
    const { config } = environment;
    if (config.performance.chunkSplit.strategy !== "split-by-experience") {
      return;
    }
    const currentConfig = chain.optimization.splitChunks.values();
    if (!isPlainObject(currentConfig)) {
      return;
    }
    const extraGroups = {};
    if (options.react) {
      extraGroups.react = {
        name: "lib-react",
        test: isProd ? /node_modules[\\/](?:react|react-dom|scheduler)[\\/]/ : /node_modules[\\/](?:react|react-dom|scheduler|react-refresh|@rspack[\\/]plugin-react-refresh)[\\/]/,
        priority: 0
      };
    }
    if (options.router) {
      extraGroups.router = {
        name: "lib-router",
        test: /node_modules[\\/](?:react-router|react-router-dom|history|@remix-run[\\/]router)[\\/]/,
        priority: 0
      };
    }
    if (!Object.keys(extraGroups).length) {
      return;
    }
    chain.optimization.splitChunks({
      ...currentConfig,
      cacheGroups: {
        ...currentConfig.cacheGroups,
        ...extraGroups
      }
    });
  });
};

// src/index.ts
var PLUGIN_REACT_NAME = "rsbuild:react";
var pluginReact = ({
  enableProfiler = false,
  ...options
} = {}) => ({
  name: PLUGIN_REACT_NAME,
  setup(api) {
    if (api.context.bundlerType === "rspack") {
      applyBasicReactSupport(api, options);
      if (enableProfiler) {
        applyReactProfiler(api);
      }
    }
    applySplitChunksRule(api, options?.splitChunks);
  }
});
export {
  PLUGIN_REACT_NAME,
  pluginReact
};
